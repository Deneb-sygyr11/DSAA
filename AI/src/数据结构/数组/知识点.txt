定义：在计算机科学中，数组是由一组元素（值或变量）组成的数据结构，每个元素至少有一个索引或键来标识

数组中的元素是连续存储的，所以数组中元素的地址，可以通过其索引计算出来
e.g.
已知一个整形数组中，索引为0的元素的地址为a，则索引为1的元素的地址为a+4，索引为n的元素的地址为a+4n(n前的系数由该数组数据类型占用的内存空间决定，
在这里，int类型字符所占空间为4个字节，如double则为8字节)

数组的空间占用：
    ·8字节标识符(markword)
    ·4字节类指针(压缩类指针的情况)
    ·4字节数组大小(决定了数组最大容量为2^32)
    ·数组元素 + 对齐字节(java中所有对象都是8字节的整数倍，不足的要用对齐字节补足)
e.g.给定数组 int[] array = {1 ,2 ,3 ,4 ,5}， 则该数组所占空间大小为 8 + 4 + 5 * 4 + 4(对齐字节) = 40

随机访问的时间复杂度为O(1)

动态数组：在静态数组的基础上实现增删等功能(java中已有案例：Arraylist)

局部性原理：
    ·空间局部性：
        在处理数据时，cpu需要先从内存中获取对应数据，然而，cpu处理数据的时间是皮秒级(10^-12)，而从内存中读取数据的时间是纳秒级(10^-9)，
    在此过程中，会浪费cpu大量的算力。于是，通过建立缓存，提升数据的读取速度。因为cpu读取缓存中数据的速度极快(几乎与cpu处理数据的速度相当)，
    所以通过此方法显著提升了数据处理的总体速度。
        基于上述原理，系统在读取内存中数据时，会一并读取该数据临近的其他数据(一次最少是64bytes，即一缓存行：cache line)，这就是空间局部性。
        (这就是为什么对二维数组进行处理时要先进行行遍历再进行列遍历)